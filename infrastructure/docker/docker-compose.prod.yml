version: "3.9"

services:
  # Frontend service
  frontend:
    build:
      context: ../../src/web
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=https://api.estatekit.com
        - VITE_AUTH0_DOMAIN=${AUTH0_DOMAIN}
        - VITE_AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
        - VITE_INTERCOM_APP_ID=${INTERCOM_APP_ID}
    image: estatekit/frontend:${TAG:-latest}
    environment:
      - NODE_ENV=production
      - TZ=UTC
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
      rollback_config:
        parallelism: 1
        delay: 5s
        failure_action: pause
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    security_opt:
      - no-new-privileges:true
    read_only: true
    networks:
      - estatekit_prod

  # Backend service
  backend:
    build:
      context: ../../src/backend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    image: estatekit/backend:${TAG:-latest}
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=ca-central-1
      - S3_BUCKET=${S3_BUCKET}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - INTERCOM_ACCESS_TOKEN=${INTERCOM_ACCESS_TOKEN}
      - TZ=UTC
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
      rollback_config:
        parallelism: 1
        delay: 5s
        failure_action: pause
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    networks:
      - estatekit_prod

  # PostgreSQL database
  postgres:
    image: postgres:14-alpine
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - TZ=UTC
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    security_opt:
      - no-new-privileges:true
    networks:
      - estatekit_prod

  # Redis cache
  redis:
    image: redis:6.2-alpine
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    security_opt:
      - no-new-privileges:true
    networks:
      - estatekit_prod

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: /data/postgres_prod
      o: bind
      encrypted: "true"
  redis_data:
    driver: local
    driver_opts:
      type: none
      device: /data/redis_prod
      o: bind
      encrypted: "true"

networks:
  estatekit_prod:
    driver: overlay
    attachable: true
    driver_opts:
      encrypted: "true"
      com.docker.network.driver.mtu: "1450"
    ipam:
      driver: default
      config:
        - subnet: "172.16.0.0/24"